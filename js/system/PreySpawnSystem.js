// Generated by CoffeeScript 1.8.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.PreySpawnSystem = (function(_super) {
    __extends(PreySpawnSystem, _super);

    function PreySpawnSystem(game, minDelay, maxDelay) {
      this.game = game;
      this.minDelay = minDelay != null ? minDelay : 1000;
      this.maxDelay = maxDelay != null ? maxDelay : 10000;
      this.spawnPrey = __bind(this.spawnPrey, this);
      this.getPrey = __bind(this.getPrey, this);
      this.tick = __bind(this.tick, this);
      this.nextSpawn = Date.now() + MathUtil.randInt(this.minDelay, this.maxDelay);
    }

    PreySpawnSystem.prototype.tick = function() {
      if (Date.now() - this.nextSpawn >= 0) {
        this.spawnPrey();
        return this.nextSpawn = Date.now() + MathUtil.randInt(this.minDelay, this.maxDelay);
      }
    };

    PreySpawnSystem.prototype.getPrey = function() {
      var a, prey, r, sprite, typeCount;
      sprite = PIXI.Sprite.fromImage('img/animalTex.png');
      typeCount = 4;
      switch (Math.floor(MathUtil.randInt(0, typeCount))) {
        case 0:
        case 1:
        case 2:
          a = new Animal(sprite);
          a.sprite.tint = 0x79cc26;
          a.setSize(0.3);
          a.maxSpeed /= 2.0;
          prey = new ShyAnimalController(this.game, a);
          break;
        case 3:
          a = new Hunter(sprite);
          a.sprite.tint = 0xeecccc;
          a.setSize(0.5);
          prey = new StupidHunter(this.game, a);
      }
      r = a.size * Constants.TEX_UNIT;
      a.setPosition(new Vector(MathUtil.randInt(r, Screen.width / Constants.UNIT - r), MathUtil.randInt(r, Screen.height / Constants.UNIT - r)));
      return prey;
    };

    PreySpawnSystem.prototype.spawnPrey = function() {
      var prey;
      console.log('Spawning prey');
      prey = this.getPrey();
      this.game.animals.push(prey);
      return this.game.stage.addChild(prey.model.sprite);
    };

    return PreySpawnSystem;

  })(System);

}).call(this);
