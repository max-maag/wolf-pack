// Generated by CoffeeScript 1.8.0
(function() {
  var Game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {
    function Game() {
      this.init = __bind(this.init, this);
      this.step = __bind(this.step, this);
      this.onDeath = __bind(this.onDeath, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
    }

    Game.prototype.update = function() {
      var a, animal, ds, dt, i, j, l, m1, m2, r, system, v, _i, _j, _k, _l, _len, _len1, _len2, _m, _ref, _ref1, _ref2, _ref3;
      dt = (Date.now() - this.lastFrame) / 1000;
      l = this.animals.length;
      for (i = _i = 0; 0 <= l ? _i < l : _i > l; i = 0 <= l ? ++_i : --_i) {
        for (j = _j = _ref = i + 1; _ref <= l ? _j < l : _j > l; j = _ref <= l ? ++_j : --_j) {
          m1 = this.animals[i].model;
          m2 = this.animals[j].model;
          if (m1.getRadius() + m2.getRadius() >= m1.position.subCpy(m2.position).length()) {
            this.animals[i].onCollide(this.animals[j]);
            this.animals[j].onCollide(this.animals[i]);
          }
        }
      }
      _ref1 = this.animals;
      for (_k = 0, _len = _ref1.length; _k < _len; _k++) {
        animal = _ref1[_k];
        animal.think(dt);
      }
      _ref2 = this.animals;
      for (_l = 0, _len1 = _ref2.length; _l < _len1; _l++) {
        animal = _ref2[_l];
        a = animal.model;
        a.velocity.add(a.acceleration.mulCpy(dt));
        if (a.velocity.length() > a.maxSpeed) {
          a.velocity.normalize().mul(a.maxSpeed);
        }
        ds = a.position.clone();
        a.position.add(a.velocity.mulCpy(dt));
        r = a.size * Constants.TEX_UNIT / 2.0;
        if (a.position.x - r <= 0) {
          a.position.x = r;
          a.velocity.x = 0;
        } else if (a.position.x + r >= Screen.width / Constants.UNIT) {
          a.position.x = Screen.width / Constants.UNIT - r;
          a.velocity.x = 0;
        }
        if (a.position.y <= r) {
          a.position.y = r;
          a.velocity.y = 0;
        } else if (a.position.y + r >= Screen.height / Constants.UNIT) {
          a.position.y = Screen.height / Constants.UNIT - r;
          a.velocity.y = 0;
        }
        if (a instanceof Hunter) {
          a.setSize(a.size - ds.sub(a.position).length() * a.energyPerUnit);
          if (a.size < Constants.SMALLEST_SIZE) {
            animal.die('starvation');
          }
        }
        a.sprite.position.set(a.position);
        a.sprite.position.mul(Constants.UNIT);
        v = a.velocity.length();
        if (v !== 0) {
          a.sprite.rotation = Math.atan2(a.velocity.y / v, a.velocity.x / v) + Math.PI / 2;
        }
      }
      _ref3 = this.systems;
      for (_m = 0, _len2 = _ref3.length; _m < _len2; _m++) {
        system = _ref3[_m];
        system.tick();
      }
      return this.lastFrame += dt * 1000;
    };

    Game.prototype.render = function() {
      if (!this.stillRendering) {
        this.stillRendering = true;
        this.renderer.render(this.stage);
        return this.stillRendering = false;
      }
    };

    Game.prototype.onDeath = function() {
      this.dead = true;
      return console.log("You died of " + this.playerController.model.reasonOfDeath);
    };

    Game.prototype.step = function() {
      if (this.playerController.model.dead) {
        if (!this.dead) {
          this.onDeath();
        }
      } else {
        this.update();
      }
      this.render();
      return requestAnimFrame(this.step);
    };

    Game.prototype.init = function() {
      this.dead = false;
      this.stage = new PIXI.Stage(0xffffff);
      this.renderer = PIXI.autoDetectRenderer(Screen.width, Screen.height);
      this.loader = new PIXI.AssetLoader(['img/animalTex.png']);
      document.body.appendChild(this.renderer.view);
      this.stillRendering = false;
      this.lastFrame = Date.now();
      this.playerSprite = PIXI.Sprite.fromImage('img/animalTex.png');
      this.playerSprite.tint = 0xcccccc;
      this.stage.addChild(this.playerSprite);
      this.playerController = new PlayerController(this, new Hunter(this.playerSprite, new Vector(Screen.width, Screen.height).mul(1.0 / 2.0 / Constants.UNIT)));
      this.playerController.model.setSize(0.5);
      document.addEventListener("keydown", this.playerController.handleInput);
      document.addEventListener("keyup", this.playerController.handleInput);
      this.animals = [this.playerController];
      this.systems = [new PreySpawnSystem(this)];
      this.loader.onComplete = (function(_this) {
        return function() {
          return requestAnimFrame(function() {
            return _this.step();
          });
        };
      })(this);
      return this.loader.load();
    };

    return Game;

  })();

  window.onload = function() {
    return (new Game()).init();
  };

}).call(this);
